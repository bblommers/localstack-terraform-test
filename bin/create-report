#!/usr/bin/python3

import glob
import os

from collections import defaultdict

prefixes = {
    'go': '[ltt.gotest]',
    'lst': '[ltt.localstack]',
    'runner': '[ltt.runner]'
}

class TestCase:
    def __init__(self, suite, test):
        self.suite = suite
        self.test = test
        self.lines = list()
        self.duration = 0
        self.result = None


class RunnerLogParser:
    def __init__(self, suite):
        self.suite = suite
        self.tests = dict()
        self.active_test = None

    def parse_duration(self, fragment):
        seconds = fragment[1:-2] # (0.00s) -> 0.00
        return float(seconds)

    def add_line(self, src, line):
        tests = self.tests
        suite = self.suite

        output = line[len(prefixes[src]) + 1:]

        if src == 'go':
            if output.startswith('=== RUN'):
                _ ,_ , test = output.split()
                if test not in tests:
                    tests[test] = TestCase(suite, test)

                self.active_test = test
                return

            elif output.startswith('=== PAUSE'):
                _ ,_ , test = output.split()
                self.active_test = None
                return

            elif output.startswith('=== CONT'):
                _ ,_ , test = output.split()
                self.active_test = None
                return

            elif output.strip().startswith('--- PASS'):
                _ ,_ , test, duration = output.split()
                self.active_test = None
                tests[test].result = 'passed'
                tests[test].duration = self.parse_duration(duration)
                return

            elif output.strip().startswith('--- SKIP'):
                _ ,_ , test, duration = output.split()
                self.active_test = None
                tests[test].result = 'skipped'
                tests[test].duration = self.parse_duration(duration)
                return

            elif output.strip().startswith('--- FAIL'):
                _ ,_ , test, duration = output.split()
                self.active_test = None
                tests[test].result = 'failed'
                tests[test].duration = self.parse_duration(duration)
                return

        if self.active_test:
            tests[self.active_test].lines.append(line)

        pass


def parse(suite, lines):
    parser = RunnerLogParser(suite)

    for line in lines:
        for src, prefix in prefixes.items():
            if line.startswith(prefix):
                parser.add_line(src, line)
                
    for test in parser.tests.values():
        if test.result is None:
            test.result = 'errored'
            test.duration = 0.

    return parser

def main():
    for f in glob.glob('build/tests/*.log'):
        with open(f, 'r') as fd:
            lines = fd.readlines()
        
        suite = os.path.basename(f)[:-4] # strip `.log`
        parser = parse(suite, lines)

        d = {
            'testsuite': {
            'properties': [{
                'property': {
                    'name': 'generator',
                    'value': 'custom report generator'
                }
            }]}
        }
        print(dict2xml(d))

def dict2xml(d, root_node=None):
    wrap          =     False if None == root_node or isinstance(d, list) else True
    root          = 'objects' if None == root_node else root_node
    root_singular = root[:-1] if 's' == root[-1] and None == root_node else root
    xml           = ''
    children      = []

    if isinstance(d, dict):
        for key, value in dict.items(d):
            if isinstance(value, dict):
                children.append(dict2xml(value, key))
            elif isinstance(value, list):
                children.append(dict2xml(value, key))
            else:
                xml = xml + ' ' + key + '="' + str(value) + '"'
    else:
        for value in d:
            children.append(dict2xml(value, root_singular))

    end_tag = '>' if 0 < len(children) else '/>'

    if wrap or isinstance(d, dict):
        xml = '<' + root + xml + end_tag

    if 0 < len(children):
        for child in children:
            xml = xml + child

        if wrap or isinstance(d, dict):
            xml = xml + '</' + root + '>'
        
    return xml

if __name__ == '__main__':
    main()
